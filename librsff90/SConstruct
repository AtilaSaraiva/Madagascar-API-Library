import sys, os
sys.path.append('../framework')
import bldutil

try: # distribution version
    Import('env root libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../c/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','') + 'rsf'])

if 'f90' in env.get('API',[]) and 'F90' in env:
    nvfortran = '/home/atila/nvidia/Linux_x86_64/21.3/compilers/bin/nvfortran'
    F90 = env.get('F90')
    F90 = nvfortran
    F90base =  os.path.basename(F90)
    env.Append(CPPDEFINES=['$CFORTRAN90'])

    # F90base = 'nvfortran'
    env.Append(CFLAGS=' -I${SOURCE.dir}')
    if F90base[:8] == 'gfortran' or F90base[:3] == 'gfc':
        env.Append(CPPDEFINES=['GFORTRAN'],
                   CFLAGS=' -I${SOURCE.dir}')
    elif F90base[:5] == 'pgf90':
        env.Append(CFLAGS=' -I${SOURCE.dir}')
    elif F90base[:5] == 'ifort':
        env.Append(CPPDEFINES=['INTEL_COMPILER'])

    obj = env.Object('fortran.o','fortran.c')
    f90obj = env.Object('rsf.f90')

    lib = env.StaticLibrary('rsff90',[f90obj[0],'fortran.o'])
    mod = f90obj[1]

    env.Depends(obj,['cfortran.h','ptr_sz.h'])
    env.Depends(f90obj,'ptr_sz.f90')

    env.Install('../../lib',lib)
    env.Install('../../include',mod)

    if root:
        env.Install(libdir,lib)
        env.Install(incdir,mod)

    for file in ['getpar','file']:
        test = 'Test' + file + '.f90'
        env.Program(file,[test,lib],
                    PROGSUFFIX='.x',
                    PROGPREFIX='Test',
                    LINK=F90)
