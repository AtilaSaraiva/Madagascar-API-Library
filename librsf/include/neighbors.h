/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_neighbors_h
#define _sf_neighbors_h


void sf_neighbors_init (int *in1     /* status flag [n[0]*n[1]*n[2]] */, 
			float *rdx1  /* grid sampling [3] */, 
			int *n1      /* grid samples [3] */, 
			int order1   /* accuracy order */, 
			float *time1 /* traveltime [n[0]*n[1]*n[2]] */);
/*< Initialize >*/


int  sf_neighbours(int i);
/*< Update neighbors of gridpoint i, return number of updated points >*/


int  sf_neighbours2(int i);
/*< Update neighbors of gridpoint i, return number of updated points >*/


int sf_neighbors_distance(int np         /* number of points */,
			  float *vv1     /* slowness squared */,
			  float **points /* point coordinates[np][3] */,
			  float *d       /* grid sampling [3] */,
			  float *o       /* grid origin [3] */);
/*< initialize distance computation >*/


int sf_neighbors_nearsource(float* xs   /* source location [3] */, 
			    int* b      /* constant-velocity box around it [3] */, 
			    float* d    /* grid sampling [3] */, 
			    float* vv1  /* slowness [n[0]*n[1]*n[2]] */, 
			    bool *plane /* if plane-wave source */);
/*< initialize the source >*/


int sf_neighbors_surface(float* vv1  /* slowness [n[0]*n[1]*n[2]] */,
			 float* tt0  /* surface traveltime [n[1]*n[2]] */,
			 bool forw /* forward or backward continuation */);
/*< initialize the source at the surface >*/


int sf_neighbors_mask(float* vv1  /* slowness [n[0]*n[1]*n[2]] */,
		      float* tref /* reference traveltime [n[0]*n[1]*n[2]] */,
		      bool* known /* where known [n[0]*n[1]*n[2]] */,
		      bool forw   /* forward or backward continuation */);
/*< initialize the source using a mask >*/

#endif
