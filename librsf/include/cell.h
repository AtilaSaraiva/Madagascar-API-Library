/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_cell_h
#define _sf_cell_h


#include "_bool.h"


void sf_cell1_intersect (float a, float x, float dy, float p, 
			 float *sx, int *jx);
/*< intersecting a straight ray with cell boundaries >*/


float sf_cell1_update1 (int dim, float s, float v, float *p, const float *g);
/*< symplectic first-order: step 1 >*/


float sf_cell1_update2 (int dim, float s, float v, float *p, const float *g);
/*< symplectic first-order: step 2 >*/


void sf_cell11_intersect2 (float a, float da, 
			const float* p, const float* g, 
			float *sp, int *jp);
/*< intersecting a straight ray with cell boundaries >*/


float sf_cell11_update1 (int dim, float s, float v, float *p, const float *g);
/*< nonsymplectic first-order: step 1 >*/


float sf_cell11_update2 (int dim, float s, float v, float *p, const float *g);
/*< nonsymplectic first-order: step 2 >*/


void sf_cell_intersect (float a, float x, float dy, float p, 
			float *sx, int *jx);
/*< intersecting a parabolic ray with cell boundaries >*/


bool sf_cell_snap (float *z, int *iz, float eps);
/*< round to the nearest boundary >*/


float sf_cell_update1 (int dim, float s, float v, float *p, const float *g);
/*< symplectic second-order: step 1 >*/


float sf_cell_update2 (int dim        /* number of dimensions */, 
		       float s        /* sigma */, 
		       float v        /* slowness */, 
		       float *p       /* in - ?, out - direction */, 
		       const float *g /* slowness gradient */);
/*< symplectic second-order: step 2 >*/


float sf_cell_p2a (float* p);
/*< convert ray parameter to angle >*/

#endif
