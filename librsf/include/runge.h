/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_runge_h
#define _sf_runge_h


void sf_runge_init(int dim1 /* dimensionality */, 
		   int n1   /* number of ray tracing steps */, 
		   float d1 /* step in time */);
/*< initialize >*/


void sf_runge_close(void);
/*< free allocated storage >*/


float sf_ode23 (float t /* time integration */,
		float* tol /* error tolerance */,
		float* y   /* [dim] solution */, 
		void* par  /* parameters for function evaluation */,
		void (*rhs)(void*,float*,float*) 
		/* RHS function */, 
		int (*term)(void*,float*)
	     /* function returning 1 if the ray needs to terminate */);
/*< ODE solver for dy/dt = f where f comes from rhs(par,y,f)
  Note: Value of y is changed inside the function.
  >*/


int sf_ode23_step (float* y    /* [dim] solution */, 
		   void* par   /* parameters for function evaluation */,
		   void (*rhs)(void*,float*,float*) 
		   /* RHS function */, 
		   int (*term)(void*,float*)
		   /* function returning 1 if the ray needs to terminate */, 
		   float** traj /* [nt+1][dim] - ray trajectory (output) */);
/*< ODE solver for dy/dt = f where f comes from rhs(par,y,f)
  Note:
  1. Value of y is changed inside the function.
  2. The output code for it = ode23_step(...)
  it=0 - ray traced to the end without termination
  it>0 - ray terminated
  The total traveltime along the ray is 
  nt*dt if (it = 0); it*dt otherwise 
  >*/

#endif
