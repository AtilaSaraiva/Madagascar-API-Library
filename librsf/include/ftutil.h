/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_ftutil_h
#define _sf_ftutil_h


#include "kiss_fft.h"
#include "komplex.h"
#include "_bool.h"


typedef struct sf_fft *sf_fft3d;


struct sf_fft{
    int n1,n2,n3;
    kiss_fft_cfg forw; /* forward transform */
    kiss_fft_cfg invs; /* inverse transform */
    float scale;
    kiss_fft_cpx *trace;
};


typedef struct sf_ompfft *ompfft3d;


struct sf_ompfft{
    int n1,n2,n3;
    int ompnth;
    kiss_fft_cfg *forw; /* forward transform */
    kiss_fft_cfg *invs; /* inverse transform */
    float scale;
    kiss_fft_cpx **trace;
};


typedef struct sf_sft *sft3d;


struct sf_sft{
    float o,d;
    sf_complex *www;
};


typedef struct sf_ompsft *ompsft3d;


struct sf_ompsft{
    float o,d;
    sf_complex **www;
};


/*------------------------------------------------------------*/
sf_fft3d sf_fft3a1_init(int n1_, 
		     int n2_, 
		     int n3_);
/*< initialize FFT on axis 1 >*/


/*------------------------------------------------------------*/
ompfft3d sf_ompfft3a1_init(int n1_, 
			   int n2_, 
			   int n3_, 
			   int ompnth_);
/*< initialize FFT on axis 1 >*/


/*------------------------------------------------------------*/
sf_fft3d sf_fft3a2_init(int n1_, 
		     int n2_, 
		     int n3_);
/*< initialize FFT on axis 2 >*/


/*------------------------------------------------------------*/
ompfft3d sf_ompfft3a2_init(int n1_, 
			   int n2_, 
			   int n3_,
			   int ompnth_);
/*< initialize FFT on axis 2 >*/


/*------------------------------------------------------------*/
sf_fft3d sf_fft3a3_init(int n1_, 
		     int n2_, 
		     int n3_);
/*< initialize FFT on axis 3 >*/


/*------------------------------------------------------------*/
ompfft3d sf_ompfft3a3_init(int n1_, 
			   int n2_, 
			   int n3_,
			   int ompnth_);
/*< initialize FFT on axis 3 >*/


/*------------------------------------------------------------*/
void sf_fft3a1_close(sf_fft3d fft);
/*< free allocated storage for FFT on axis 1 >*/


/*------------------------------------------------------------*/
void sf_ompfft3a1_close(ompfft3d fft);
/*< free allocated storage for FFT on axis 1 >*/


/*------------------------------------------------------------*/
void sf_fft3a2_close(sf_fft3d fft);
/*< free allocated storage for FFT on axis 2 >*/


/*------------------------------------------------------------*/
void sf_ompfft3a2_close(ompfft3d fft);
/*< free allocated storage for FFT on axis 2 >*/


/*------------------------------------------------------------*/
void sf_fft3a3_close(sf_fft3d fft);
/*< free allocated storage for FFT on axis 3 >*/


/*------------------------------------------------------------*/
void sf_ompfft3a3_close(ompfft3d fft);
/*< free allocated storage for FFT on axis 3 >*/


/*------------------------------------------------------------*/
void sf_fft3a1(bool inv           /* inverse/forward flag */, 
	       kiss_fft_cpx ***pp /* [n1][n2][n3] */,
	       sf_fft3d fft);
/*< apply FFT on axis 1 >*/


/*------------------------------------------------------------*/
void sf_ompfft3a1(bool inv           /* inverse/forward flag */, 
		  kiss_fft_cpx ***pp /* [n1][n2][n3] */,
		  ompfft3d fft,
		  int ompith);
/*< apply FFT on axis 1 >*/


/*------------------------------------------------------------*/
void sf_fft3a2(bool inv           /* inverse/forward flag */, 
	       kiss_fft_cpx ***pp /* [n1][n2][n3] */,
	       sf_fft3d fft);
/*< apply FFT on axis 2 >*/


/*------------------------------------------------------------*/
void sf_ompfft3a2(bool inv           /* inverse/forward flag */, 
		  kiss_fft_cpx ***pp /* [n1][n2][n3] */,
		  ompfft3d fft,
		  int ompith);
/*< apply FFT on axis 2 >*/


/*------------------------------------------------------------*/
void sf_fft3a3(bool inv           /* inverse/forward flag */, 
	       kiss_fft_cpx ***pp /* [n1][n2][n3] */,
	       sf_fft3d fft);
/*< apply FFT on axis 3 >*/


/*------------------------------------------------------------*/
void sf_ompfft3a3(bool inv           /* inverse/forward flag */, 
		  kiss_fft_cpx ***pp /* [n1][n2][n3] */,
		  ompfft3d fft,
		  int ompith);
/*< apply FFT on axis 3 >*/


/*------------------------------------------------------------*/
void sf_cnt3a1(sf_complex ***pp,
	       sf_fft3d fft);
/*< apply centering on axis 1 >*/


/*------------------------------------------------------------*/
void sf_cnt3a2(sf_complex ***pp,
	       sf_fft3d fft);
/*< apply centering on axis 2 >*/


/*------------------------------------------------------------*/
void sf_cnt3a3(sf_complex ***pp,
	       sf_fft3d fft);
/*< apply centering on axis 3>*/


/*------------------------------------------------------------*/
sft3d sf_sft3_init(int n,
		   float o,
		   float d);
/*< origin shift (assumes no centering) >*/


/*------------------------------------------------------------*/
ompsft3d sf_ompsft3_init(int n,
			 float o,
			 float d,
			 int ompnth);
/*< origin shift (assumes no centering) >*/


/*------------------------------------------------------------*/
void sf_sft3_reset(int n,
		   float o,
		   float d,
		   sft3d sft);
/*< reset shift parameters >*/


/*------------------------------------------------------------*/
void sf_ompsft3_reset(int n,
		      float o,
		      float d,
		      ompsft3d sft,
		      int ompith);
/*< reset shift parameters >*/


/*------------------------------------------------------------*/
void sf_sft3_close(sft3d sft);
/*< close shift >*/


/*------------------------------------------------------------*/
void sf_ompsft3_close(ompsft3d sft);
/*< close shift >*/


/*------------------------------------------------------------*/
void sf_sft3a3(sf_complex ***pp,
	       sft3d sft,
	       sf_fft3d fft);
/*< apply shift on axis 3 >*/


/*------------------------------------------------------------*/
void sf_ompsft3a3(sf_complex ***pp,
		  ompsft3d sft,
		  ompfft3d fft,
		  int ompith);
/*< apply shift on axis 3 >*/


/*------------------------------------------------------------*/
void sf_sft3a2(sf_complex ***pp,
	       sft3d sft,
	       sf_fft3d fft);
/*< apply shift on axis 2 >*/


/*------------------------------------------------------------*/
void sf_ompsft3a2(sf_complex ***pp,
		  ompsft3d sft,
		  ompfft3d fft,
		  int ompith);
/*< apply shift on axis 2 >*/


/*------------------------------------------------------------*/
void sf_sft3a1(sf_complex ***pp,
	       sft3d sft,
	       sf_fft3d fft);
/*< apply shift on axis 1 >*/


/*------------------------------------------------------------*/
void sf_ompsft3a1(sf_complex ***pp,
		  ompsft3d sft,
		  ompfft3d fft,
		  int ompith);
/*< apply shift on axis 1 >*/

#endif
